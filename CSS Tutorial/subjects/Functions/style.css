@import url('https://fonts.googleapis.com/css2?family=Ysabeau&display=swap');

/* RESET */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* VARIABLES */

/*
When you use the \min(x,y)\ function you must always choose different measuring principles.
If the values use the same principle it's obviously only ever going to choose the smaller size.
When you have responsive design you can use percentages, vw, vh and compare those with a rem unit.
Below we chose a min with rem and vh, height of the screen.
Usual application is to set one absolute value first and then a relative value.
Viewport height units are more commonly used for screen height units.

Suggestion for min(x,y) was (2.25rem, 3vh);
Suggestion for max(x,y) was (1.75rem, 3vh);
What may be counter-intuitive is that this means that the min(x,y) value provides a maximum size.
and the max(x,y) provides a minimum size.
 */

/*
Another function is the \clamp\ function:
You first give your minimum values like you would in the max function and then end with the your maximum
size which is the absolute value of the min() function.
Written out below we see clamp(1.75rem, 3vh, 2.25rem);
  */

:root {
    /* FONT */
    --FONT-FAMILY: "Ysabeau", sans-serif;
    --FONT-SIZE: clamp(1.50rem, 3vh, 2.25rem);
    --FONT-SIZE-SMALL: clamp(1.25rem, 2vh, 1.5rem) --FONT-SIZE-XL: 3rem;

    /* COLOR */
    --BGCOLOUR: #475569;
    --ALTBGCOLOUR: #1e293b;
    --RADIAL-COLOUR: whitesmoke;
    --LIGHT-COLOUR: whitesmoke;
    --DARK-COLOUR: #000;

    /* SQUARE */
    --SQUARE-BGCOLOUR: papayawhip;
    --SQUARE-SIZE: max(150px, 20vw);

    /* GENERAL */
    --PADDING: 0.5em;
    --SHADOW: 0 6px 5px -5px var(--DARK-COLOUR);
    --BORDER: 2px solid var(--DARK-COLOUR);
}

/*
You will have to put color in the american spelling here for it to work as intended.
 */

@media (prefers-color-scheme: dark) {
    :root {
        --BGCOLOUR: #000;
        --ALT-BGCOLOUR: #333;
        --RADIAL-COLOUR: rgb(217, 217, 217);
        --SQUARE-BGCOLOUR: rgb(202, 174, 202);
    }
}

/* GENERAL STYLES */
body {
    font: var(--FONT-SIZE) var(--FONT-FAMILY);
    min-height: 100vh;
    background-color: var(--BGCOLOUR);
    background-image: radial-gradient(var(--RADIAL-COLOUR), var(--BGCOLOUR));
    display: flex;
    flex-direction: column;
}

header,
nav,
footer {
    display: grid;
    place-content: center;
    grid-template-columns: 100%;
    text-align: center;
}


header,
footer {
    position: sticky;
    background-color: var(--ALTBGCOLOUR);
    color: var(--LIGHT-COLOUR);
}


header {
    top: 0;
}

nav {
    background-color: var(--LIGHT-COLOUR);
    color: var(--DARK-COLOUR);
    border-bottom: var(--BORDER);
    box-shadow: var(--SHADOW);
}

main {
    flex-grow: 1;
    padding: var(--PADDING);
    display: grid;
    grid-template-columns: repeat(4, minmax(100px, 300px));
    gap: min(2vw, 20px);
    /* display: flex; */
    /* flex-flow: column nowrap; */
    /* justify-content: flex-start; */
}

main section {
    flex-grow: 1;
    padding: var(--PADDING);
}

main aside {
    background-color: hsla(0, 0%, 20%, 0.8);
    color: var(--LIGHT-COLOUR);
    font-size: var(--FONT-SIZE-SMALL);
    font-style: italic;
    padding: var(--PADDING);
}

.content {
    margin-top: 20px;
}

.tooltip {
    border-bottom: 1px dashed orange;
    position: relative;
}

.tooltip:hover::before {
    content: attr(data-tooltip);
    position: absolute;
    top: -20px;
    white-space: nowrap;
    background-color: var(--DARK-COLOUR);
    padding: var(--PADDING);
    border-radius: 15px;
}

footer {
    bottom: 0;
}

a:any-link {
    color: firebrick;
}

/*
Using brightness here instead of hsl to make the links a little brighter when you hover over them.
Another option would be to use \hue-rotate\(xyz degrees) using 180 would give you the inverted color.
 */

a:hover,
a:focus {
    filter: brightness(1.5);
}

/* FEATURES */

.square {
    background-color: var(--SQUARE-BGCOLOUR);
    /* width: var(--SQUARE-SIZE); */
    /* height: var(--SQUARE-SIZE); */
    border: var(--BORDER);
    border-radius: 15px;
    display: grid;
    place-content: center;
    font-size: var(--FONT-SIZE-XL);
    box-shadow: var(--SHADOW);
}

.square--highlight {
    --SQUARE-BGCOLOUR: cornflowerblue;
}

/* MEDIA QUERIES */

/* || SMALL || */
@media screen and (min-width: 576px) {
    main {
        flex-flow: row nowrap;
        justify-content: space-between;
    }

    main section {
        width: calc(70% - 5px);
    }

    main aside {
        width: calc(30% - 5px);
    }
}