@import url('https://fonts.googleapis.com/css2?family=Ysabeau&display=swap');

/* RESET */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


/* VARIABLES */
:root {
    /* FONT */
    --FONT-FAMILY: "Ysabeau", sans-serif;
    --FONT-SIZE: clamp(1.50rem, 3vh, 2.25rem);
    --FONT-SIZE-SMALL: clamp(1.25rem, 2vh, 1.5rem) --FONT-SIZE-XL: 3rem;

    /* COLOR */
    --BGCOLOUR: #475569;
    --ALTBGCOLOUR: #1e293b;
    --RADIAL-COLOUR: whitesmoke;
    --LIGHT-COLOUR: whitesmoke;
    --DARK-COLOUR: #000;

    /* SQUARE */
    --SQUARE-BGCOLOUR: papayawhip;
    --SQUARE-SIZE: max(150px, 20vw);

    /* GENERAL */
    --PADDING: 0.5em;
    --SHADOW: 0 6px 5px -5px var(--DARK-COLOUR);
    --BORDER: 2px solid var(--DARK-COLOUR);
}


/* GENERAL STYLES */

html {
    font-size: var(--FONT-SIZE);
    font-family: var(--FONT-FAMILY);
}

body {
    min-height: 100vh;
    display: flex;
    flex-flow: column nowrap;
}

main {
    flex-grow: 1;
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    align-items: center;
    gap: 1rem;
}

div {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    display: grid;
    place-content: center;
}

/*
Notice that when we use \transform\ translateX the div container gets move to the right. When we use
a percentage it will be move that percentage of the container's size, not the screen's size, to the right.
If we use a negative value it would have moved to the left. TranslateY similarly, moves containers up and down.
\translate\ can be used as shorthand to move on both axes in one call.
 */

/*
For \transform\ rotate you are sort of flipping the container. 180 degrees will effectively be upside-down.
At 90 degrees you will actually not see anything because the container is perfectly level.
When you use the \rotateY\ the container will flip on the Y-axis.
\rotateZ\ will spin the container like it's on a pin or, indeed, a Z-axis
 */

div:first-child {
    background-color: dodgerblue;
    /* transform: translateX(50%); */
    /* transform: rotateX(180deg); */
    /* transform: scaleX(120%); */
    /* transform: skewX(-10deg); */
}

div:nth-child(2) {
    background-color: yellow;
    /* transform: translateY(-2rem); */
    /* transform: rotateY(135deg); */
    /* transform: scaleY(120%); */
    /* transform: skewY(10deg); */
}

div:last-child {
    background-color: limegreen;
    /* transform: translate(100%, -5rem); */
    /* transform: rotateZ(135deg); */
    /* transform: scale(50%, 50%); */
    /* transform: skew(10deg, 10deg); */
}

/*
Example below shows 2 transitions with different durations. Delay is applicable to both of them.
Shorthand \transition\ allows you to set duration and delay in one line.
 */

div:hover {
    background-color: midnightblue;
    /* transition-property: background-color, transform;
    transition-duration: 2s, 3s;
    transition-delay: 200ms; */
    /* transition-timing-function: linear; */
    transition: all 2s 200ms;
}

div:last-child:hover {
    transform: rotate(180deg);
}

/*
An animation will need a name so always start with that.
\animation-direction\ alternate is a cool option to go both ways and just program an animation in one direction.
\animation-fill-mode\ by default set to backwards which means it will return to the original state at the end of the animation.
When set to forwards it will keep the state that was reached at the end of the animation.
 */

/*
\animation\ is the shorthand for all that: duration | timing | delay | iterations | direction | fill-mode | name
 */

.animate {
    /* animation-name: slide;
    animation-duration: 5s;
    animation-timing-function: ease-in-out;
    animation-delay: 1s;
    animation-iteration-count: 5;
    animation-direction: alternate;
    animation-fill-mode: forwards; */
    animation: 5s ease-out 1s 3 alternate backwards slide;
}

@keyframes slide {
    0% {
        transform: translateX(0);
    }

    33% {
        transform: translateX(800px) rotate(180deg);
    }

    66% {
        transform: translateX(-800px) rotate(-180deg);
        background-color: rebeccapurple;
    }

    100% {
        transform: translateX(0);
        transition-timing-function: ease-out;
        background-color: limegreen;
    }
}