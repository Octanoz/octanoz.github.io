@import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/*
Here we made a simple setup where the rows were divided in 50px top and bottom and the rest (middle) was left to auto.
Then, using the 9 columns set earlier we use the \grid-template-areas\ to set specifically where which variable goes (hd / sb / ft)
Then in the header, sidebar and footer class we use the \grid-area\ and set it to hd / sb / ft to claim that name / area.
\grid-area\ is a shorthand for grid-row(start/end) and grid-column(start/end) but used here to assign the template areas.
There are quite a few options with this shorthand. See more at: https: //developer.mozilla.org/en-US/docs/Web/CSS/grid-area
 */

body {
    font-family: 'Open Sans', sans-serif;
    min-height: 100vh;
    display: grid;
    grid-template-columns: repeat(9, 1fr);
    grid-auto-rows: 50px auto 50px;
    grid-template-areas:
        "hd hd hd hd hd hd hd hd hd"
        "mn mn mn mn mn mn mn sb sb"
        "ft ft ft ft ft ft ft ft ft";
    column-gap: 0.5rem;
}

.el {
    background-color: rebeccapurple;
    color: white;
    display: grid;
    place-content: center;
}

.header {
    grid-area: hd;
}

.sidebar {
    grid-area: sb;
    background-color: blue;
}

.footer {
    grid-area: ft;
}

/*
\grid-template-columns\ allows you to set the width for every column or even every column individually. You can use absolute values
or fractions of the available space (fr). You can also mix the two where fr will use the space left after the absolute values are applied.
You can also set your settings to repeat a manually chosen number of times.
It's also important to note that grids can have empty space at the end, depending on how it was configured.
 */

/*
fr is only used in grid. It is not available in flex-box or anywhere else in CSS.
  */

.container {
    min-height: 400px;
    grid-area: mn;
    display: grid;
    grid-template-columns: repeat(2, 1fr 2fr);
    grid-auto-rows: minmax(150px, auto);
    gap: 1rem;
}

.box {
    background-color: #000;
    color: #fff;
    font-size: 2rem;
    padding: 0.5rem;
}



/*
Here we're giving a particular set of columns a color, 1 to 4. When you do that you'll notice everything else
 is just counting on like nothing happened to them because it didn't.
 Instead of \grid-row-start and grid-row-end\ you can use \grid-row\ and input start / end instead.
 Same goes for columns.

 Instead of \align-content\ and \justify-content\ we're using \place-content\ as the shorthand for these. 
 */
.box:first-child {
    background-color: #00f;
    grid-column: 1 / 4;
    grid-row: 1 / 3;
    display: grid;
    place-content: center;
}

/*
Here you see another colour being applied to the next row.
By applying the row numeration of 3 - 4 it actually moves the other divs up to the side of the first div 
and before the div that we're entering these details to.
 */

.box:nth-child(2) {
    background-color: purple;
    grid-column: 1 / 5;
    grid-row: 3 / 4;
}

/*
There is a \grid-column\ setting to set the beginning and ending column for you CSS
There is a \grid-row\ setting to set the beginning and ending row for your CSS
The shorthand is \grid-area\ to set row start - column start and row end / column end
Your end value seems to have to be one more than the actual value
\grid-column-start : 1 // \grid-column-end: 4 will be 3 columns wide
However going in reverse: \grid-column-end: 5 // \grid-column-start: 2 works as you would expect and is also 3 columns wide
 */

/*
You can set the grid rows with \grid-template-rows\ and the columns with \grid-template-columns\.
Shorthand is \grid-template\. You can set the row sizes first and then separate for the columns with a /.
Example: grid-template: 60% 40% / 200px
Top row 60% of the screen, bottom at 40% then the column is set at 200px wide.
  */

a:any-link {
    color: gold;
}